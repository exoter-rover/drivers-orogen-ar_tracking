name "ar_tracking"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library "ar_tracking"
import_types_from "base"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
# using_library "ar_tracking"
# import_types_from "ar_tracking/CustomType.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the ar_tracking namespace.
task_context "Task" do
    default_activity :periodic, 0.01
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    property("host", "/std/string").
        doc "the network host of the ART tracking system"
    property("server_port", "int", 5000).
        doc "the network port to use for the vicon tracking system"
    property("data_port", "int", 0).
        doc "the network port to use for the vicon tracking system"

    property("numBody","int",0).
        doc "the number of the body that is being tracked"

    property("source_frame", "/std/string", "measurement").
            doc "from frame for the transformer"
    property("target_frame", "/std/string", "segment").
            doc "to frame for the transformer"


    property("origin", "/base/samples/RigidBodyState").
        doc "set the origin of the segment, includes position and orientation."
    
    property("body_reference", "/base/samples/RigidBodyState").
         doc "transformation between segment cs (vicon data)" +
             "and a choosen body fixed reference cs"

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port('pose_samples', '/base/samples/RigidBodyState').
        doc "pose of the configured segment."

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    # By default, the task will be periodic with a period of 0.1
    
end

